# Example feature flag configuration block. Replace `example` with the name of your feature.
# i.e. for a feature called `geo_location` the toml header will be `[default.flags.geo_location]`
# and it will be checked in code with the name `geo_location` (e.g. `flags.is_enabled("geo_location")`)
#
# [default.flags.example]
# `scheme` - Bucketing scheme for the flag. Allowed values are 'random' and 'session',
#   defaults to `session`. Random generates a random bucketing id for every flag check.
#   Session bucketing uses the session id of the request as the bucketing key so that feature
#   checks within a given search session would be consistent.
# scheme="session"
#
# `enabled` - Required. This represents the % enabled for the
#   flag and must be a float between 0 and 1. A value of 0 indicates that
#   the flag is 'off' (meaning that a check for the flag will return False 100%
#   of the time) and a value of 1 indicates that the flag is 'on' for all.
# enabled=0.5

# We define the following feature flag in the default config, so we can learn
# about using StatsD tags as query filters in our Grafana dashboard, while we
# don't use any actual feature flags in the suggest API.
[default.flags.test_flight_01]
scheme = 'random'
enabled = 0.5
